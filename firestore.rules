rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidString(field, minLen, maxLen) {
      return field is string && 
             field.size() >= minLen && 
             field.size() <= maxLen;
    }
    
    function isProjectMember(projectId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/projects/$(projectId)) &&
             get(/databases/$(database)/documents/projects/$(projectId))
               .data.teamMembers.hasAny([{userId: request.auth.uid}]);
    }
    
    function isProjectOwner(projectId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/projects/$(projectId)) &&
             get(/databases/$(database)/documents/projects/$(projectId))
               .data.ownerId == request.auth.uid;
    }
    
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId) && 
                      request.resource.data.email is string;
      allow update: if isOwner(userId) &&
                      (!request.resource.data.keys().hasAny(['email']) ||
                       request.resource.data.email == resource.data.email);
      allow delete: if isOwner(userId);
      allow list: if isAuthenticated() && 
                    request.query.limit <= 20;
    }
    
    match /projects/{projectId} {
      allow read: if isProjectMember(projectId);
      allow create: if isAuthenticated() &&
                      isValidString(request.resource.data.name, 1, 200) &&
                      request.resource.data.ownerId == request.auth.uid &&
                      request.resource.data.teamMembers.hasAny([{userId: request.auth.uid}]);
      allow update: if isProjectOwner(projectId) &&
                      request.resource.data.ownerId == resource.data.ownerId;
      allow delete: if isProjectOwner(projectId);
      allow list: if isAuthenticated();
      
      match /tasks/{taskId} {
        allow read: if isProjectMember(projectId);
        allow create: if isProjectMember(projectId) &&
                        isValidString(request.resource.data.title, 1, 200) &&
                        request.resource.data.stage in ['Pre-production', 'Production', 'Post-production'] &&
                        request.resource.data.completed is bool;
        allow update: if isProjectMember(projectId);
        allow delete: if isProjectMember(projectId);
        allow list: if isProjectMember(projectId) &&
                      request.query.limit <= 100;
      }
      
      match /equipment/{equipmentId} {
        allow read: if isProjectMember(projectId);
        allow create: if isProjectMember(projectId) &&
                        request.resource.data.equipmentId is string &&
                        request.resource.data.name is string;
        allow update: if isProjectMember(projectId);
        allow delete: if isProjectMember(projectId);
        allow list: if isProjectMember(projectId) &&
                      request.query.limit <= 100;
      }
      
      match /marketing/{marketingId} {
        allow read: if isProjectMember(projectId);
        allow create: if isProjectMember(projectId) &&
                        isValidString(request.resource.data.copy, 1, 5000) &&
                        request.resource.data.platforms is list &&
                        request.resource.data.platforms.size() > 0 &&
                        request.resource.data.status in ['draft', 'scheduled', 'posted'];
        allow update: if isProjectMember(projectId);
        allow delete: if isProjectMember(projectId);
        allow list: if isProjectMember(projectId) &&
                      request.query.limit <= 100;
      }
      
      match /invoices/{invoiceId} {
        allow read: if isProjectMember(projectId);
        allow create: if isProjectMember(projectId) &&
                        isValidString(request.resource.data.invoiceNumber, 1, 100) &&
                        request.resource.data.amount is number &&
                        request.resource.data.amount >= 0 &&
                        request.resource.data.status in ['pending', 'paid', 'overdue'];
        allow update: if isProjectMember(projectId);
        allow delete: if isProjectOwner(projectId);
        allow list: if isProjectMember(projectId) &&
                      request.query.limit <= 100;
      }
      
      match /documents/{documentId} {
        allow read: if isProjectMember(projectId);
        allow create: if isProjectMember(projectId) &&
                        isValidString(request.resource.data.name, 1, 255) &&
                        isValidString(request.resource.data.fileUrl, 1, 2000) &&
                        request.resource.data.uploadedBy == request.auth.uid;
        allow update: if isProjectMember(projectId);
        allow delete: if isProjectMember(projectId);
        allow list: if isProjectMember(projectId) &&
                      request.query.limit <= 100;
      }
    }
    
    match /equipment/{equipmentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() &&
                      isValidString(request.resource.data.name, 1, 200) &&
                      isValidString(request.resource.data.category, 1, 50) &&
                      request.resource.data.status in ['Available', 'In Use', 'Maintenance'];
      allow update: if isAuthenticated() &&
                      request.resource.data.status in ['Available', 'In Use', 'Maintenance'];
      allow delete: if isAuthenticated();
      allow list: if isAuthenticated() &&
                    request.query.limit <= 200;
    }
    
    match /{document=**} {
      allow read, write: if false;
    }
  }
}